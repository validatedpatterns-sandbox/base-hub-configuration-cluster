---
# Source: acs-central/templates/rbac/cluster-init-bundle-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-cluster-init
  namespace: rhacs-operator
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
# Source: acs-central/templates/rbac/cluster-init-bundle-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  name: create-cluster-init
  namespace: rhacs-operator
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - patch
      - update
  - apiGroups:
      - platform.stackrox.io
    resources:
      - securedclusters
    verbs:
      - get
      - list
      - patch
      - update
---
# Source: acs-central/templates/rbac/cluster-init-bundle-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-cluster-init
  namespace: rhacs-operator
  annotations:
    argocd.argoproj.io/sync-wave: "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: create-cluster-init
subjects:
  - kind: ServiceAccount
    name: create-cluster-init
    namespace: rhacs-operator
---
# Source: acs-central/templates/job-create-auth-provider.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "7"
  name: create-auth-provider
  namespace: rhacs-operator
spec:
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    spec:
      containers:
        - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: central-htpasswd
                  key: password
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              echo "Creating auth provider in RHACS"
              export DATA={\"name\":\"local-cluster\"}
              curl -X POST -u "admin:$PASSWORD" -k https://central/v1/authProviders --data '{"name": "OpenShift OAuth", "type": "openshift", "enabled": true}' > /tmp/output.json
              AUTH_PROVIDER_ID=$(sed 's/,/\n/g' /tmp/output.json | grep -w id | awk -F\" '{ print $4 }') ### Since the image does not have the 'jq' command
              JSON_PAYLOAD="{\"roleName\":\"Admin\",\"props\":{\"authProviderId\":\"$AUTH_PROVIDER_ID\",\"key\":\"name\",\"value\":\"kube:admin\"}}"
              curl -X POST -u "admin:$PASSWORD" -k https://central/v1/groups -s --data "$JSON_PAYLOAD" ### Adding the Admin entry for the KubeAdmin user
              JSON_PAYLOAD="{\"roleName\":\"Admin\",\"props\":{\"authProviderId\":\"$AUTH_PROVIDER_ID\",\"key\":\"name\",\"value\":\"cluster-admin\"}}"
              curl -X POST -u "admin:$PASSWORD" -k https://central/v1/groups -s --data "$JSON_PAYLOAD" ### Adding the Admin entry for the cluster-admin user (ROSA)
          imagePullPolicy: Always
          name: create-auth-provider
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: create-cluster-init
      serviceAccountName: create-cluster-init
      terminationGracePeriodSeconds: 30
---
# Source: acs-central/templates/job-create-init-bundle.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "5"
  name: create-cluster-init-bundle
  namespace: rhacs-operator
spec:
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    spec:
      containers:
        - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: central-htpasswd
                  key: password
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              if kubectl get secret/sensor-tls &> /dev/null; then
                echo "cluster-init bundle has already been configured, doing nothing"
                exit 0
              else

                # Wait for central to be ready
                attempt_counter=0
                max_attempts=20
                echo "Waiting for central to be available..."
                until $(curl -k --output /dev/null --silent --head --fail https://central); do
                    if [ ${attempt_counter} -eq ${max_attempts} ];then
                      echo "Max attempts reached"
                      exit 1
                    fi

                    printf '.'
                    attempt_counter=$(($attempt_counter+1))
                    echo "Made attempt $attempt_counter, waiting..."
                done

                echo "Configuring cluster-init bundle"
                export DATA={\"name\":\"local-cluster\"}
                curl -k -o /tmp/bundle.json -X POST -u "admin:$PASSWORD" -H "Content-Type: application/json" --data $DATA https://central/v1/cluster-init/init-bundles

                echo "Bundle received"
                cat /tmp/bundle.json

                echo "Applying bundle"
                # No jq in container, python to the rescue
                cat /tmp/bundle.json | python3 -c "import sys, json; print(json.load(sys.stdin)['kubectlBundle'])" | base64 -d | oc apply -f -
                # Touch SecuredCluster to force operator to reconcile
                oc label SecuredCluster local-cluster cluster-init-job-status=created

                echo "ACS Cluster init bundle generated and applied"
              fi
          imagePullPolicy: Always
          name: create-cluster-init-bundle
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: create-cluster-init
      serviceAccountName: create-cluster-init
      terminationGracePeriodSeconds: 30
---
# Source: acs-central/templates/central.yaml
apiVersion: platform.stackrox.io/v1alpha1
kind: Central
metadata:
  name: rhacs-central-services
  namespace: rhacs-operator
spec:
  central:
    exposure:
      loadBalancer:
        enabled: false
        port: 443
      nodePort:
        enabled: false
      route:
        enabled: true
    persistence:
      persistentVolumeClaim:
        claimName: stackrox-db
  egress:
    connectivityPolicy: Online
  scanner:
    analyzer:
      scaling:
        autoScaling: Enabled
        maxReplicas: 5
        minReplicas: 2
        replicas: 3
    scannerComponent: Enabled
